"""                                     Основи ООП в Python
                        
                        Основи ООП


    Існує декілька методологій створення програмних продуктів і Об'єктноорієнтоване програмування (ООП) по 
праву вважається однією з найефективніших.
    ☝ Спосіб організації програм, коли об'єднують дані та функціонал усередині якогось об'єкта, називають 
    об'єктноорієнтованою парадигмою програмування.
    В ООП програма розглядається як набір об'єктів, які взаємодіють між собою. Найважливіші одиниці 
програми - це класи та об’єкти. Ви пишете класи, що описують реально чинні предмети та ситуації, а потім 
створюєте об'єкти на основі цих описів. Кожен об’єкт належить до певного класу і зберігає в собі усю 
інформацію про власні дані та функціонал.
    Класи — це структура мови програмування, яка дозволяє об'єднати в рамках однієї сутності змінні різних 
типів (поля, атрибути) та функції (методи).
    Типовий приклад покемон Pikachu, це об'єкт класу Pokemon, має поля, які його характеризують: name, type, 
health. Методи attack, dodge та evolve дозволяють виконувати якісь дії та взаємодіяти з іншими об'єктами.
    Ми вже знайомі з тим, як працювати з класами у Python і неодноразово використовували їх. Річ у тім, що 
майже все у Python — це об'єкт класу.
    Покажемо найпростіший клас на наступному прикладі. """
class Person:
    pass  # Порожній блок для тіла класу

p = Person()
""" Ми створюємо новий клас за допомогою оператора class та імені класу Person. Після цього ставиться 
двокрапка і з наступного рядка слідує блок виразів, що формують тіло класу. В нашому випадку блок у нас 
порожній, на що вказує оператор pass. Далі ми створюємо об'єкт-екземпляр класу, записуючи ім'я класу з 
дужками.
    
    ☝ Існує нестрога домовленість називати клас з великої літери і, якщо назва складається з декількох 
    слів, то усі слова з великої літери без додаткових символів між ними.

    Наочною метафорою для того, щоб зрозуміти різницю між класом та об'єктом може бути форма для випічки 
печива і печиво. Клас — це форма, яка задає суть об'єкта, те, які поля він містить і як можна оперувати з 
цими полями. А об'єкт класу — це печиво, воно обов'язково буде заданої класом форми, але начинка кожного 
печива може бути різною.
    Таким чином клас — це форма для випікання, а ось готове печиво — це об'єкти класу. """
class User:
    name = 'Anonymous'
    age = 15

user1 = User()
print("Class",User)
print("user1",user1)
print("Type user1",type(user1))
print("user1.name",user1.name)
print("user1.age",user1.age)

user2 = User()
print("user2",user2)
print("Type user1",type(user2))
user2.name = "John"
user2.age = 90
print("user2.name",user2.name)
print("user2.age",user2.age)

""" Виведення:

Class <class '__main__.User'>
user1 <__main__.User object at 0x7f8c2c0cfd90>
Type user1 <class '__main__.User'>
user1.name Anonymous
user1.age 15
user2 <__main__.User object at 0x7f8c2c0cfe50>
Type user1 <class '__main__.User'>
user2.name John
user2.age 90

    В цьому прикладі ми створили два об'єкти класу User: user1 та user2. Обидва цих об'єкти належать класу 
User, бо вони мають однакову форму, але вони відмінні один від одного, бо начинка у них різна. Таким чином 
ви можете працювати з об'єктами класів user1 та user2 знаючи, що у них є поля та методи, визначені в класі 
User.

    У контексті об'єктно-орієнтованого програмування в Python, терміни "атрибут класу", "поле класу" та 
"метод класу" відносяться до різних аспектів класу, хоча іноді вони можуть використовуватися взаємозамінно.
    Атрибут класу – це змінна, яка визначена на рівні класу, а не екземпляра класу. Це означає, що вона 
спільна для всіх екземплярів цього класу. Атрибути класу використовуються для зберігання даних, які повинні 
бути однаковими для всіх об'єктів класу."""
class MyClass:
    class_attribute = "I am a class attribute" 
""" Всі екземпляри MyClass будуть мати однакове значення атрибуту class_attribute.

    Поле класу (іноді називається "атрибут екземпляра") – це змінна, яка визначена на рівні окремого 
екземпляра класу. Кожен екземпляр класу має свій власний набір полів, які можуть приймати різні значення 
для різних екземплярів. Полем може бути будь-який об'єкт Python. Зазвичай це змінна, або контейнер 
(словник, список, рядок тощо). Поля класу використовуються для зберігання даних, що специфічні для кожного 
окремого об'єкта. """
class MyClass:
    def __init__(self, value):
        """ Ініціалізуємо поле класу з переданим значенням """
        self.instance_field = value  # Поле класу

obj1 = MyClass(5)
obj2 = MyClass(10)

""" Тут об'єкти obj1 та obj2 мають різні значення поля instance_field. У obj1 значення поля instance_field 
дорівнює 5, а у obj2 значення instance_field - 10. 

    Трохи далі ми розглянемо детально різницю між полем та атрибутом.
    Метод класу — це функція, яка оперує з полями класу та/або аргументами, які передаються у метод.
Методи класу описують поведінку класу та як він взаємодіє з іншими об'єктами. Щоб метод класу міг працювати 
з іншими методами та полями класу, першим аргументом будь-якого методу завжди виступає сам об'єкт класу. 
Для першого аргументу можна використовувати будь-яку назву, яка не викликає синтаксичної помилки, однак, є 
домовленість завжди використовувати self.
    У будь-якого методу класу завжди повинен бути, принаймні, один аргумент self, це вимога синтаксису Python, 
оскільки інтерпретатор під час виклику методу обов'язково передасть першим аргументом сам об'єкт, а потім 
уже всі аргументи, які були передані під час виклику."""

class Person:
    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age

    def say_name(self) -> None:
        print(f'Hi! I am {self.name} and I am {self.age} years old.')

    def set_age(self, age: int) -> None:
        self.age = age

bob = Person('Boris', 34)

bob.say_name()
bob.set_age(25)
bob.say_name()

""" Тут метод __init__() — спеціальний метод-конструктор, який автоматично виконується під час створення 
кожного нового екземпляра на базі класу Person. Ім'я методу починається і закінчується двома символами 
підкреслення. 
    Причина в тому, що так ми запобігаємо конфліктам імен стандартних методів Python та методів наших 
класів. Насправді метод __init__() є магічним методом і ми повернемося до нього у наступному модулі.
    Коли ми створюємо екземпляр Person, Python викликає метод __init__() із класу Person. Ми передаємо у 
виклик Person("Boris", 34) ім'я "Boris" та вік 34 в аргументах. Пам'ятаємо, що значення self буде передано 
автоматично, явно передавати його не потрібно.
    У цьому класу ми додали два методи класу Person: say_name та set_age. Зверніть увагу, що метод класу 
say_name не приймає параметрів, проте має self у визначенні функції. Метод виводить у консоль рядок 
привітання від користувача. Для формування цього рядку використовуються поля name та age. Метод set_age 
приймає на вхід число та записує його в поле age.

Виведення:

Hi! I am Boris and I am 34 years old.
Hi! I am Boris and I am 25 years old.
"""

